// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaycardtensflowServiceClient is the client API for PlaycardtensflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaycardtensflowServiceClient interface {
	SendPlayCardToServer(ctx context.Context, in *ReqPlayCardinfo, opts ...grpc.CallOption) (*RespPlayCardInfo, error)
}

type playcardtensflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaycardtensflowServiceClient(cc grpc.ClientConnInterface) PlaycardtensflowServiceClient {
	return &playcardtensflowServiceClient{cc}
}

func (c *playcardtensflowServiceClient) SendPlayCardToServer(ctx context.Context, in *ReqPlayCardinfo, opts ...grpc.CallOption) (*RespPlayCardInfo, error) {
	out := new(RespPlayCardInfo)
	err := c.cc.Invoke(ctx, "/playcardtensflow.v1.playcardtensflowService/SendPlayCardToServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaycardtensflowServiceServer is the server API for PlaycardtensflowService service.
// All implementations must embed UnimplementedPlaycardtensflowServiceServer
// for forward compatibility
type PlaycardtensflowServiceServer interface {
	SendPlayCardToServer(context.Context, *ReqPlayCardinfo) (*RespPlayCardInfo, error)
	mustEmbedUnimplementedPlaycardtensflowServiceServer()
}

// UnimplementedPlaycardtensflowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaycardtensflowServiceServer struct {
}

func (UnimplementedPlaycardtensflowServiceServer) SendPlayCardToServer(context.Context, *ReqPlayCardinfo) (*RespPlayCardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPlayCardToServer not implemented")
}
func (UnimplementedPlaycardtensflowServiceServer) mustEmbedUnimplementedPlaycardtensflowServiceServer() {
}

// UnsafePlaycardtensflowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaycardtensflowServiceServer will
// result in compilation errors.
type UnsafePlaycardtensflowServiceServer interface {
	mustEmbedUnimplementedPlaycardtensflowServiceServer()
}

func RegisterPlaycardtensflowServiceServer(s grpc.ServiceRegistrar, srv PlaycardtensflowServiceServer) {
	s.RegisterService(&PlaycardtensflowService_ServiceDesc, srv)
}

func _PlaycardtensflowService_SendPlayCardToServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPlayCardinfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaycardtensflowServiceServer).SendPlayCardToServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playcardtensflow.v1.playcardtensflowService/SendPlayCardToServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaycardtensflowServiceServer).SendPlayCardToServer(ctx, req.(*ReqPlayCardinfo))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaycardtensflowService_ServiceDesc is the grpc.ServiceDesc for PlaycardtensflowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaycardtensflowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playcardtensflow.v1.playcardtensflowService",
	HandlerType: (*PlaycardtensflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPlayCardToServer",
			Handler:    _PlaycardtensflowService_SendPlayCardToServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/playcardfortensflow/v1/playcardfortensflow.proto",
}
